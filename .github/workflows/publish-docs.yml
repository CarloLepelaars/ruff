# Publish the Ruff documentation.
#
# Assumed to run as a subworkflow of .github/workflows/release.yml; specifically, as a post-announce
# job within `cargo-dist`.
name: mkdocs

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "The commit SHA, tag, or branch to publish. Uses the default branch if not specified."
        default: ""
        type: string
  workflow_call:
    inputs:
      plan:
        required: true
        type: string

jobs:
  mkdocs:
    runs-on: ubuntu-latest
    env:
      MKDOCS_INSIDERS_SSH_KEY_EXISTS: ${{ secrets.MKDOCS_INSIDERS_SSH_KEY != '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: "Set docs version"
        run: |
          version="${{ (inputs.plan != '' && fromJson(inputs.plan).announcement_tag) || inputs.ref }}"
          # if version is missing, exit with error
          if [[ -z "$version" ]]; then
            echo "Can't build docs without a version."
            exit 1
          fi

          # Use version as display name for now
          display_name="$version"

          # Extract the major and minor part of the version for the docs
          docs_version="$(echo -n "$version" | cut -d "." -f 1-2)"

          echo "version=$version" >> "$GITHUB_ENV"
          echo "docs_version=$docs_version" >> "$GITHUB_ENV"
          echo "display_name=$display_name" >> "$GITHUB_ENV"

      - name: "Set branch name"
        run: |
          timestamp="$(date +%s)"

          # Create `branch_display_name` from `display_name` by replacing all
          # characters disallowed in git branch names with hyphens
          branch_display_name="$(echo -n "$display_name" | tr -c '[:alnum:]._' '-' | tr -s '-')"

          echo "branch_name=update-docs-$branch_display_name-$timestamp" >> "$GITHUB_ENV"
          echo "timestamp=$timestamp" >> "$GITHUB_ENV"

      - name: "Add SSH key"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MKDOCS_INSIDERS_SSH_KEY }}

      - name: "Install Rust toolchain"
        run: rustup show

      - uses: Swatinem/rust-cache@v2

      - name: "Install insiders dependencies"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}
        run: pip install -r docs/requirements-insiders.txt

      - name: "Install dependencies"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS != 'true' }}
        run: pip install -r docs/requirements.txt

      - name: "Fetch docs repo"
        run: |
          remote_name="astral-docs"

          git remote add "$remote_name" https://${{ secrets.ASTRAL_DOCS_PAT }}@github.com/astral-sh/docs.git
          git fetch astral-docs "main:$branch_name"

          echo "remote_name=$remote_name" >> "$GITHUB_ENV"

      - name: "Configure git"
        run: |
          git config user.name "astral-docs-bot"
          git config user.email "176161322+astral-docs-bot@users.noreply.github.com"

      - name: "Transform README and generate docs"
        run: |
          python scripts/transform_readme.py --target mkdocs
          python scripts/generate_mkdocs.py

      - name: "Build Insiders docs"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}
        run: |
          mike deploy \
            --remote "$remote_name" \
            --branch "$branch_name" \
            --message "Update ruff documentation for $version" \
            --config-file mkdocs.insiders.yml \
            --update-aliases \
            --push \
            "$docs_version" latest

      - name: "Build docs"
        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS != 'true' }}
        run: |
          mike deploy \
            --remote "$remote_name" \
            --branch "$branch_name" \
            --message "Update ruff documentation for $version" \
            --config-file mkdocs.public.yml \
            --update-aliases \
            --push \
            "$docs_version" latest

      - name: "Create Pull Request"
        env:
          GITHUB_TOKEN: ${{ secrets.ASTRAL_DOCS_PAT }}
        run: |
          # Set the docs repository
          astral_docs_repo="astral-sh/docs"

          # Set the PR title
          pull_request_title="Update ruff documentation for $display_name"

          # Delete any existing pull requests that are open for this version
          # by checking against `pull_request_title` because the new PR will
          # supersede the old one.
          gh pr list \
            --state open \
            --json title,number \
            --jq '.[] | select(.title == "$pull_request_title") | .number' \
            --repo "$astral_docs_repo" | \
              xargs -I {} gh pr close {}

          # Create the PR, the branch has already been pushed by `mike`
          gh pr create --base main --head "$branch_name" \
            --title "$pull_request_title" \
            --body "Automated documentation update for $display_name" \
            --label "documentation" \
            --repo "$astral_docs_repo"

      # TODO(dhruvmanila): Uncomment once a patch and minor release are done, thus
      # confirming that it works as intended
      #
      # - name: "Merge Pull Request"
      #   if: ${{ inputs.plan != '' && !fromJson(inputs.plan).announcement_tag_is_implicit }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ASTRAL_DOCS_PAT }}
      #   run: |
      #     branch_name="${{ env.branch_name }}"
      #     # auto-merge the PR if the build was triggered by a release. Manual builds should be reviewed by a human.
      #     # give the PR a few seconds to be created before trying to auto-merge it
      #     sleep 10
      #     gh pr merge --squash $branch_name --repo "astral-sh/docs"
