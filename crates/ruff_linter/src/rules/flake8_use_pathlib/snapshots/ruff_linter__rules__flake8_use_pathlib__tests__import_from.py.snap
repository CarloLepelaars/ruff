---
source: crates/ruff_linter/src/rules/flake8_use_pathlib/mod.rs
---
error[PTH100]: 9:5: `os.path.abspath()` should be replaced by `Path.resolve()`

  --> import_from.py:9:5
   |
 7 | q = "bar"
 8 | 
 9 | a = abspath(p)
   |     ^^^^^^^
10 | aa = chmod(p)
11 | aaa = mkdir(p)
   |
error[PTH101]: 10:6: `os.chmod()` should be replaced by `Path.chmod()`

  --> import_from.py:10:6
   |
 9 | a = abspath(p)
10 | aa = chmod(p)
   |      ^^^^^
11 | aaa = mkdir(p)
12 | makedirs(p)
   |
error[PTH102]: 11:7: `os.mkdir()` should be replaced by `Path.mkdir()`

  --> import_from.py:11:7
   |
 9 | a = abspath(p)
10 | aa = chmod(p)
11 | aaa = mkdir(p)
   |       ^^^^^
12 | makedirs(p)
13 | rename(p)
   |
error[PTH103]: 12:1: `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`

  --> import_from.py:11:15
   |
10 | aa = chmod(p)
11 | aaa = mkdir(p)
12 | makedirs(p)
   | ^^^^^^^^
13 | rename(p)
14 | replace(p)
   |
error[PTH104]: 13:1: `os.rename()` should be replaced by `Path.rename()`

  --> import_from.py:12:12
   |
11 | aaa = mkdir(p)
12 | makedirs(p)
13 | rename(p)
   | ^^^^^^
14 | replace(p)
15 | rmdir(p)
   |
error[PTH105]: 14:1: `os.replace()` should be replaced by `Path.replace()`

  --> import_from.py:13:10
   |
12 | makedirs(p)
13 | rename(p)
14 | replace(p)
   | ^^^^^^^
15 | rmdir(p)
16 | remove(p)
   |
error[PTH106]: 15:1: `os.rmdir()` should be replaced by `Path.rmdir()`

  --> import_from.py:14:11
   |
13 | rename(p)
14 | replace(p)
15 | rmdir(p)
   | ^^^^^
16 | remove(p)
17 | unlink(p)
   |
error[PTH107]: 16:1: `os.remove()` should be replaced by `Path.unlink()`

  --> import_from.py:15:9
   |
14 | replace(p)
15 | rmdir(p)
16 | remove(p)
   | ^^^^^^
17 | unlink(p)
18 | getcwd(p)
   |
error[PTH108]: 17:1: `os.unlink()` should be replaced by `Path.unlink()`

  --> import_from.py:16:10
   |
15 | rmdir(p)
16 | remove(p)
17 | unlink(p)
   | ^^^^^^
18 | getcwd(p)
19 | b = exists(p)
   |
error[PTH109]: 18:1: `os.getcwd()` should be replaced by `Path.cwd()`

  --> import_from.py:17:10
   |
16 | remove(p)
17 | unlink(p)
18 | getcwd(p)
   | ^^^^^^
19 | b = exists(p)
20 | bb = expanduser(p)
   |
error[PTH110]: 19:5: `os.path.exists()` should be replaced by `Path.exists()`

  --> import_from.py:19:5
   |
17 | unlink(p)
18 | getcwd(p)
19 | b = exists(p)
   |     ^^^^^^
20 | bb = expanduser(p)
21 | bbb = isdir(p)
   |
error[PTH111]: 20:6: `os.path.expanduser()` should be replaced by `Path.expanduser()`

  --> import_from.py:20:6
   |
18 | getcwd(p)
19 | b = exists(p)
20 | bb = expanduser(p)
   |      ^^^^^^^^^^
21 | bbb = isdir(p)
22 | bbbb = isfile(p)
   |
error[PTH112]: 21:7: `os.path.isdir()` should be replaced by `Path.is_dir()`

  --> import_from.py:21:7
   |
19 | b = exists(p)
20 | bb = expanduser(p)
21 | bbb = isdir(p)
   |       ^^^^^
22 | bbbb = isfile(p)
23 | bbbbb = islink(p)
   |
error[PTH113]: 22:8: `os.path.isfile()` should be replaced by `Path.is_file()`

  --> import_from.py:22:8
   |
20 | bb = expanduser(p)
21 | bbb = isdir(p)
22 | bbbb = isfile(p)
   |        ^^^^^^
23 | bbbbb = islink(p)
24 | readlink(p)
   |
error[PTH114]: 23:9: `os.path.islink()` should be replaced by `Path.is_symlink()`

  --> import_from.py:23:9
   |
21 | bbb = isdir(p)
22 | bbbb = isfile(p)
23 | bbbbb = islink(p)
   |         ^^^^^^
24 | readlink(p)
25 | stat(p)
   |
error[PTH115]: 24:1: `os.readlink()` should be replaced by `Path.readlink()`

  --> import_from.py:23:18
   |
22 | bbbb = isfile(p)
23 | bbbbb = islink(p)
24 | readlink(p)
   | ^^^^^^^^
25 | stat(p)
26 | isabs(p)
   |
error[PTH116]: 25:1: `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`

  --> import_from.py:24:12
   |
23 | bbbbb = islink(p)
24 | readlink(p)
25 | stat(p)
   | ^^^^
26 | isabs(p)
27 | join(p, q)
   |
error[PTH117]: 26:1: `os.path.isabs()` should be replaced by `Path.is_absolute()`

  --> import_from.py:25:8
   |
24 | readlink(p)
25 | stat(p)
26 | isabs(p)
   | ^^^^^
27 | join(p, q)
28 | sep.join((p, q))
   |
error[PTH118]: 27:1: `os.path.join()` should be replaced by `Path` with `/` operator

  --> import_from.py:26:9
   |
25 | stat(p)
26 | isabs(p)
27 | join(p, q)
   | ^^^^
28 | sep.join((p, q))
29 | sep.join([p, q])
   |
error[PTH118]: 28:1: `os.sep.join()` should be replaced by `Path` with `/` operator

  --> import_from.py:27:11
   |
26 | isabs(p)
27 | join(p, q)
28 | sep.join((p, q))
   | ^^^^^^^^
29 | sep.join([p, q])
30 | basename(p)
   |
error[PTH118]: 29:1: `os.sep.join()` should be replaced by `Path` with `/` operator

  --> import_from.py:28:17
   |
27 | join(p, q)
28 | sep.join((p, q))
29 | sep.join([p, q])
   | ^^^^^^^^
30 | basename(p)
31 | dirname(p)
   |
error[PTH119]: 30:1: `os.path.basename()` should be replaced by `Path.name`

  --> import_from.py:29:17
   |
28 | sep.join((p, q))
29 | sep.join([p, q])
30 | basename(p)
   | ^^^^^^^^
31 | dirname(p)
32 | samefile(p)
   |
error[PTH120]: 31:1: `os.path.dirname()` should be replaced by `Path.parent`

  --> import_from.py:30:12
   |
29 | sep.join([p, q])
30 | basename(p)
31 | dirname(p)
   | ^^^^^^^
32 | samefile(p)
33 | splitext(p)
   |
error[PTH121]: 32:1: `os.path.samefile()` should be replaced by `Path.samefile()`

  --> import_from.py:31:11
   |
30 | basename(p)
31 | dirname(p)
32 | samefile(p)
   | ^^^^^^^^
33 | splitext(p)
34 | with open(p) as fp:
   |
error[PTH122]: 33:1: `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`

  --> import_from.py:32:12
   |
31 | dirname(p)
32 | samefile(p)
33 | splitext(p)
   | ^^^^^^^^
34 | with open(p) as fp:
35 |     fp.read()
   |
error[PTH123]: 34:6: `open()` should be replaced by `Path.open()`

  --> import_from.py:34:6
   |
32 | samefile(p)
33 | splitext(p)
34 | with open(p) as fp:
   |      ^^^^
35 |     fp.read()
36 | open(p).close()
   |
error[PTH123]: 36:1: `open()` should be replaced by `Path.open()`

  --> import_from.py:35:14
   |
34 | with open(p) as fp:
35 |     fp.read()
36 | open(p).close()
   | ^^^^
   |
